buildscript {
	ext {
		springBootVersion = '1.4.2.RELEASE'
		cfAppVersion = '1.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "http://192.168.99.100:8081/content/groups/public" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.github.pivotalservices:ya-cf-app-gradle-plugin:${cfAppVersion}")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
		// classpath("gradle.plugin.net.vivin:gradle-semantic-build-versioning:1.1.3")
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'cf-app'
apply plugin: 'org.sonarqube'
// apply plugin: 'net.vivin.gradle-semantic-build-versioning'

jar { baseName = 'sample-spring-cloud-svc-ci' }
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

test {
	useJUnit { excludeCategories 'org.bk.producer.test.AcceptanceTest', 'org.bk.producer.test.SmokeTest' }
}

apply from: 'gradle/coverage.gradle'
apply from: 'gradle/sonar.gradle'

dependencies {
	//	compile('io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker')
	compile('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
	compile('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.cloud:spring-cloud-starter')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.webjars:bootstrap:3.3.4')
	compile('org.webjars:angularjs:1.3.15')
	compile('org.webjars:angular-ui-router:0.2.13')
	compile('org.webjars:jquery:2.1.3')
	compile('junit:junit')
	testCompile('org.assertj:assertj-core')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:1.3.1.RELEASE"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR3"
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "http://192.168.99.100:8081/content/repositories/snapshots") {
				authentication(userName: "admin", password: "admin123")
			}
			pom.version = "${version}"
			pom.artifactId = "sample-spring-cloud-svc-ci"
			pom.groupId = "org.bk"
		}
	}
}

// project.version.with {
// 	startingVersion = "1.0.0"
// 	autobump {
// 		majorPattern =~ /^\[bump-major\]$/
// 		minorPattern =~ /^\[bump-minor\]$/
// 		patchPattern =~ /^\[bump-patch\]$/
// 		preReleasePattern =~ /^\[bump-pre-release\]$/
// 		promoteToReleasePattern =~ /^\[promote-to-release\]$/
// 	}
// }

cfConfig {
	name = "sample-spring-cloud-svc-ci"
	hostName = "sample-spring-cloud-svc-ci"
	filePath = "build/libs/sample-spring-cloud-svc-ci-${version}.jar"

	ccHost = "api.local.pcfdev.io"
	ccUser = "admin"
	ccPassword = "admin"
	org = "pcfdev-org"
	space = "pcfdev-space"
	domain = "local.pcfdev.io"
	path = ""

	buildpack = "https://github.com/cloudfoundry/java-buildpack.git"
	environment = ["JAVA_OPTS": "-Djava.security.egd=file:/dev/./urandom", "SPRING_PROFILES_ACTIVE": "cloud"]
	services  = []
}

task cfAcceptanceTest(type: Test, dependsOn: "cf-get-app-detail")  {
	doFirst() { systemProperty "url", "http://${project.cfConfig.applicationDetail.urls[0]}/message" }
	useJUnit {
		includeCategories 'org.bk.producer.test.AcceptanceTest'
		excludeCategories 'org.bk.producer.test.SmokeTest'
	}
}

task cfSmokeTest(type: Test, dependsOn: "cf-get-app-detail")  {
	doFirst() { systemProperty "url", "http://${project.cfConfig.applicationDetail.urls[0]}/message" }
	useJUnit {
		includeCategories 'org.bk.producer.test.SmokeTest'
		excludeCategories 'org.bk.producer.test.AcceptanceTest'
	}
}
